R.version.string
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1:4)+c(0,10)
c(1,2,3,4)+ c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_
my_div
1:20
pi:10
15:1
?c
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
my_seq
length(my_seq)
seq(1:length(my_seq))
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Savithri")
my_name
paste(my_name, collapse" ")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(seq(1:3), c("X", "Y", "Z") sep="")
paste(seq(1:3), c("X", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
exit
exit()
?e
info(0
infor
info()
bye()
bye()
exit
quit
q()
q()
makeCacheMatrix <- function(x = matrix()) {
elc <- NULL
makeCopy(x)
set <- function(y) {
x <<- y
elc <<- NULL
}
get <- function() x
setreverse<- function(reverse) elc <<-reverse
getreverse <- function() elc
list(self = x,set = set, get = get,
setreverse = setreverse,
getreverse = getreverse)
}
makeCopy <- function(a = matrix()) {
saved <<- a
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
elc <- x$getreverse()
if ((!is.null(elc)) && (x$self == saved)) {
message("getting cached reverse matrix")
return(elc)
} else {
elc <- solve(x$get())
x$setreverse(elc)
return(elc)
}
}
b1<-matrix(c(1,2,3,2,5,2,6,-3,1), nrow=3, ncol=3)
b2<-matrix(c(1,2,6,2,5,-3,3,2,1), nrow=3, ncol=3)
a <- makeCacheMatrix(b1)
b <- makeCacheMatrix(b2)
cacheSolve(a)
cacheSolve(b)
makeCacheMatrix <- function(x = matrix()) {
elc <- NULL
makeCopy(x)
set <- function(y) {
x <<- y
elc <<- NULL
}
get <- function() x
setreverse<- function(reverse) elc <<-reverse
getreverse <- function() elc
list(self = x,set = set, get = get,
setreverse = setreverse,
getreverse = getreverse)
}
makeCopy <- function(a = matrix()) {
saved <<- a
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
elc <- x$getreverse()
if (!is.null(elc)) {
##&& (x$self == saved))
message("getting cached reverse matrix")
return(elc)
} else {
elc <- solve(x$get())
x$setreverse(elc)
return(elc)
}
}
b1<-matrix(c(1,2,3,2,5,2,6,-3,1), nrow=3, ncol=3)
b2<-matrix(c(1,2,6,2,5,-3,3,2,1), nrow=3, ncol=3)
a <- makeCacheMatrix(b1)
b <- makeCacheMatrix(b2)
cacheSolve(a)
cacheSolve(b)
a
b
str(a)
a$self <- matrix(c(1,2,6,2,5,-3,3,2,1), nrow=3, ncol=3)
a
str(a)
cacheSolve(a)
q()
q()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
getwd()
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
?read.csv
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,
r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(-(X:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran,size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
q()
summarize(cran, avg_bytes = mean(size))
select(cran, country:r_arch)
library(swirl)
ls()
rm(list-ls())
rm(list=ls())
ls
install_from_swirl("Getting and Cleaning Data")
swirl()
3
q()
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
getwd()
setwd("C:/Users/Anna")
unnamed.chunk.2 <- read.table("C:/Users/Anna/ExData_Plotting1/figure/unnamed-chunk-2.png", header=TRUE, quote="\"")
View(unnamed.chunk.2)
setwd("~/")
?read.table
setwd("~/")
setwd("C:/Users/Anna/RepData_PeerAssessment1")
## Loading and preprocessing the data. This is my research.
```{r}
library(plyr)
setwd("C:/Users/Anna/RepData_PeerAssessment1")
data <- read.csv("activity.csv", na.strings=NA)
